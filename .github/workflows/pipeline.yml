name: Deployment Pipeline

on:
  push:
    branches: [ "main" ]
#Vamos a dividir el pipeline en varios jobs para optimizar el proceso de CI/CD
jobs:
  # Este job se encargará de construir el proyecto, instalar las dependencias y generar los archivos necesarios para el despliegue
  Build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: Instalar dependencias
      run: npm ci
    - name: Build
      run: npm run build
    - uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist

  # Este job se encargará de ejecutar Oxlint, que es una herramienta de linting para verificar la calidad del código
  Oxlint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: Instalar dependencias
      run: npm ci

    - name: Instalar Oxlint
      run: npm ci --save-dev oxlint
# Ejecuta Oxlint para verificar la calidad del código
    - name: Ejecutar Oxlint
      run: npm run lint
    - name: Notificar Slack - Éxito del Oxlint
      if: success()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Oxlint verificó la calidad del codigo de: '"${{ github.repository }}"'"}' $SLACK_WEBHOOK_URL
    - name: Notificar Slack - Fallo del Oxlint
      if: failure()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Oxlint encontró errores de codigo en: '"${{ github.repository }}"' revisa tu codigo "}' $SLACK_WEBHOOK_URL




  Test:
    # Este job depende de Oxlint y Build, por lo que se ejecutará después de ellos
    # Ejecuta los tests unitarios y verifica que el código esté funcionando correctamente
    needs: [Oxlint, Build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: Instalar dependencias
      run: npm ci
    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
    - name: Test unitario
      run: npm run test
    - name: Notificar Slack - Éxito del Test unitario
      if: success()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Test unitario exitoso de: '"${{ github.repository }}"'"}'  $SLACK_WEBHOOK_URL
    # Paso para enviar notificación a Slack en caso de fallo
    - name: Notificar Slack - Fallo del Test unitario
      if: failure()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Falló el Test unitario de: '"${{ github.repository }}"' - Revisa tu codigo!"}' $SLACK_WEBHOOK_URL


  Deploy:
    # Este job depende de Test, por lo que se ejecutará después de que los tests unitarios hayan pasado
    # Despliega la aplicación a Render
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: Instalar dependencias
      run: npm ci
    - name: Desplegar a Render
      run: curl -X POST ${{secrets.DEPLOY_RENDER}}
    #Notificar a Slack que el despliegue se ha completado exitosamente
    - name: Notificar Slack - Éxito del deploy
      if: success()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"El despliegue a Render finalizado con éxito en repo: '"${{ github.repository }}"'- Puede verlo en: https://contador-de-clicks.onrender.com"}'  $SLACK_WEBHOOK_URL

    # Paso para enviar notificación a Slack en caso de fallo
    - name: Notificar Slack - Fallo del deploy
      if: failure()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"El despliegue a Render falló en repo: '"${{ github.repository }}"' - Revisa los logs!"}' $SLACK_WEBHOOK_URL


  # E2E_Test:
    # Este job depende de Deploy, por lo que se ejecutará después de que la aplicación haya sido desplegada
    # Ejecuta los tests E2E y verifica que la aplicación esté funcionando correctamente en el entorno de producción
  E2E_Test:
    needs: [Deploy]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: Instalar dependencias
      run: npm ci
    - name: Test de Cypress en modo headless #sin interfaz grafica, npx wait-on https://contador-de-clicks.onrender.com
      run: npm run cypress:run
    - name: Notificar Slack - Éxito del test E2E
      if: success()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Test E2E con Cypress finalizado con éxito en el repo: '"${{ github.repository }}"'"}' $SLACK_WEBHOOK_URL

    # Paso para enviar notificación a Slack en caso de fallo
    - name: Notificar Slack - Fallo del test E2E
      if: failure()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Fallo en el test E2E con Cypress en el repo: '"${{ github.repository }}"' revisa tu codigo "}' $SLACK_WEBHOOK_URL
